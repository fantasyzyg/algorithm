//并查集的实现

const int MAX_N = 100;
int par[MAX_N];      //父亲
int rank[MAX_N];    //树的高度

//初始化n个元素
void init(int n)
{
	for (int i = 0;i < n;++i)
	{
		par[i] = i;
		rank[i] = 0;
	}
}

//查询树的根
int find(int x)
{
	if (par[x] == x)
		return x;
	else
		return par[x] = find(par[x]);
}

//合并x和y所属的集合
void unite(int x, int y)
{
	x = find(x);
	y = find(y);

	if (x == y)
		return;
		
	//这里存在三种情况，只有在两棵树高度相同时才会更新某一棵树的高度。
	if (rank[x] < rank[y])
		par[x] = y;
	else
	{
		par[y] = x;
		if (rank[x] == rank[y])
			rank[x]++;
	}
}


//判断x和y是否属于同一个集合
bool same(int x, int y)
{
	return find(x) == find(y);
}

//并查集实现其实也是一棵树，我们可以把一些分为几棵树组成一个森林，然后我们可以合并其中的某些树，过程就是把一棵树的树根归并为另一棵树的子节点。
//然后再更新树的高度。
