#include<iostream>
#include<vector>
using namespace std;

struct X
{
	X() { cout << "构造函数（）" << endl; }
	X(const X&) { cout << "拷贝构造函数（）" << endl; }
	X& operator=(const X &rhs) { cout << "拷贝赋值函数符=(const X&)" << endl; return *this; }
	~X() { cout << "析构函数（）" << endl; }
};

void f1(X x)
{

}

void f2(X &x)
{

}

int main()
{
	cout << "局部变量：" << endl;
	X x;
	cout << endl;

	cout << "非引用参数传参：" << endl;
	f1(x);
	cout << endl;

	cout << "引用参数传参：" << endl;
	f2(x);
	cout << endl;

	cout << "动态分配：" << endl;
	X *px = new X;
	cout << endl;

	cout << "添加到容器中:" << endl;
	vector<X> vx;
	vx.push_back(x);
	cout << endl;

	cout << "释放动态分配对象：" << endl;
	delete px;
	cout << endl;

	cout << "间接初始化和赋值：" << endl;
	X y = x;
	y = x;
	cout << endl;

	cout << "程序结束：" << endl;
	return 0;
}

程序结果：
局部变量：
构造函数（）

非引用参数传参：
拷贝构造函数（）
析构函数（）

引用参数传参：

动态分配：
构造函数（）

添加到容器中:
拷贝构造函数（）

释放动态分配对象：
析构函数（）

间接初始化和赋值：
拷贝构造函数（）
拷贝赋值函数符=(const X&)

程序结束：
析构函数（）
析构函数（）
析构函数（）
请按任意键继续. . .

如果一个类需要自定义析构函数，几乎可以肯定它也需要自定义拷贝赋值运算符和拷贝构造函数。
如果一个类需要一个拷贝构造函数，几乎可以肯定它也需要一个拷贝赋值运算符，反之亦然。但是这并不意味着一定需要析构函数。
