package leetcode;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		while (in.hasNextInt()) {
			int n = in.nextInt();      // n 个学生
			int[] arr = new int[n+1];       // 学会能力值
			for (int i = 1;i <= n;++i)
				arr[i] = in.nextInt();
			
			int K = in.nextInt();      // 选出 K个学生
			int d = in.nextInt();      // 学生间距不超过d
			
			// 这里我们从下标1开始
			long[][] fmax = new long[n+1][K+1];
			long[][] fmin = new long[n+1][K+1];
			
			long res = Integer.MIN_VALUE;
			
			// i表示以第i位同学为结尾的组合
			for (int i = 1;i <= n;++i) {
				fmax[i][1] = fmin[i][1] = arr[i];
				
				/*
				 *  下面是关键步骤，首先我们需要假设的是
				 *  
				 */
				
				// 为什么需要两个不同的二维数组？ 因为能力值具有负数的情况
				// 为什么需要从第二位选起呢？  因为我们的假设就是   现在这位同学使必选的   选1个的时候就是本身啦
				for (int k=2;k <= K;++k) {
					// j代表   上一位同学   且i和j之间的间距有一定的要求 
					// 这里就是用到了  动态规划的思想了  
					for (int j=i-1;j > 0 && i-j<=d;--j) {
						/*
						 *  这里也是需要理解的！
						 *  这里是不断和前面已经存在的结果做一个比较  也就是运用到了动态规划的思想
						 *  
						 *  同样需要考虑负数的问题
						 */
						fmax[i][k] = Math.max(fmax[i][k], Math.max(fmax[j][k-1]*arr[i], fmin[j][k-1]*arr[i]));
						fmin[i][k] = Math.min(fmin[i][k], Math.min(fmax[j][k-1]*arr[i], fmin[j][k-1]*arr[i]));
					}
				}
				
				/*
				 *  这里同样需要注意的是：
				 *       我们需要在 每一次做完一位同学的运算之后就 做一次比较
				 *       为什么要这样呢？
				 *       其实是因为    我们现在的要求都是  以第i为同学为结尾的
				 *       在他前面的  k-1位同学构成的 k个同学 获得的最大值
				 *       
				 *       为了保持全局的，我们需要每一个都比较一次
				 */
				res = Math.max(res, fmax[i][K]);
			}
			
			System.out.println(res);
		}
		
		in.close();
	}

}
