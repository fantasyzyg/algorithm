#include<iostream>
#define MAX_N 1000
#define MAX_K 1000
using namespace std;


int par[MAX_N];          //父亲
int Rank[MAX_N];         //树的高度

void init(int n)
{
	for (int i = 0;i < n;++i)
	{
		par[i] = i;
		Rank[i] = 0;
	}
}

int find(int x)
{
	if (par[x] == x)
		return x;
	else
	{
		return par[x] = find(par[x]);              //路径压缩，更加快速找到根节点
	}
}


//合并x和y所属的集合
void unite(int x, int y)
{
	x = find(x);
	y = find(y);

	if (x == y)
		return;
	if (Rank[x] < Rank[y])
		par[x] = y;
	else
	{
		par[y] = x;
		if (Rank[x] == Rank[y])
			Rank[x]++;
	}
}

//判断x和y是否属于同一个集合
bool same(int x, int y)
{
	return find(x) == find(y);
}



int N = 100, K = 7;

int T[MAX_K] = { 1, 2, 2, 2, 1, 2, 1 };
int X[MAX_K] = { 101, 1, 2, 3, 1, 3 ,5 };
int Y[MAX_K] = { 1, 2, 3, 3 ,3, 1, 5 };

void solve()
{
	init(N * 3);
	int ans = 0;

	for (int i = 0;i < K;++i)
	{
		int t = T[i];
		int x = X[i] - 1, y = Y[i] - 1;

		//不正确的编号
		if (x < 0 || N <= x || N <= y || y < 0)
		{
			ans++;
			continue;
		}

		if (t == 1)
		{
			//x和y属于同一种类的信息
			if (same(x, y + N) || same(x, x + 2 * N))
				ans++;
			else
			{
				unite(x, y);
				unite(x + N, y + N);
				unite(x + 2 * N, y + 2 * N);
			}
		}
		else
		{
			//x吃y的信息
			if (same(x, y) || same(x, y + 2 * N))
				ans++;
			else
			{
				unite(x, y + N);
				unite(x + N, y + 2 * N);
				unite(x + 2 * N, y);
			}
		}
	}
	printf("%d\n", ans);
}

int main()
{
	solve();

	return 0;
}
