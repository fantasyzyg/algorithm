#include<vector>
#define MAX_V 100
#include<iostream>
using namespace std;

//图的搜索
//二分图判定
//把相邻顶点染成不同颜色的问题叫做图着色问题
//最小着色数为2的图称为二分图


vector<int> G[MAX_V];       //图
int V;                                   //顶点数

int color[MAX_V];               //顶点颜色1 或 -1

//把顶点染成1或-1
bool dfs(int v, int c)
{
	color[v] = c;           //把顶点染成颜色c
	for (int i = 0;i < G[v].size();++i)
	{
		//如果相邻顶点同色，则返回false
		if (color[G[v][i]] == c)
			return false;
		//如果相邻顶点没有染色，则染成-c
		if (color[G[v][i]] == 0 && !dfs(G[v][i], -c))
			return false;
	}
	//如果所有顶点染色过，则返回true
	return true;
}


void solve()
{
	for (int i = 0;i < V;++i)
	{
		//如果顶点i没有染色，则染色1，主要考虑图不连通的情况，若图是连通的
		//则一次深度搜索就能够遍历所有顶点
		if (color[i] == 0)
		{
			if (!dfs(i, 1))
			{
				printf("No!\n");
				return;
			}
		}
	}
	printf("Yes!\n");
}
