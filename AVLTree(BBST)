#include<iostream>
using namespace std;


template<typename T>
struct AVLTreeNode
{
	AVLTreeNode(T value, AVLTreeNode<T>*l, AVLTreeNode<T>*r)
		:key(value), lchild(l), rchild(r) {}

	T key;
	int height = 0;     //节点的高度，用于计算父节点的平衡因子(即是以该节点为根)
	AVLTreeNode<T>* lchild;
	AVLTreeNode<T>* rchild;
};

template<typename T>
class AVLTree
{
public:
	AVLTree();
	~AVLTree();

	void preOrder();
	void inOrder();
	void postOrder();

	void print();
	void destroy();

	void insert(T value);
	void remove(T value);

	AVLTreeNode<T>* search_recurse(T value);
	AVLTreeNode<T>* search_iterator(T value);

	T minimum();
	T maximum();

	int height();

private:
	AVLTreeNode<T>* root;    //根节点

	void preOrder(AVLTreeNode<T>* pnode)const;
	void inOrder(AVLTreeNode<T>* pnode)const;
	void postOrder(AVLTreeNode<T>* pnode)const;

	void print(AVLTreeNode<T>* pnode, T value, int direction)const;
	void destory(AVLTreeNode<T>* &pnode);

	AVLTreeNode<T>* minimum(AVLTreeNode<T>*pnode)const;
	AVLTreeNode<T>* maximum(AVLTreeNode<T>*pnode)const;

	AVLTreeNode<T>* insert(AVLTreeNode<T>* &pnode, T value);
	AVLTreeNode<T>* remove(AVLTreeNode<T>* &pnode, T pdel);

	AVLTreeNode<T>* search_recurse(AVLTreeNode<T>* pnode, T value)const;
	AVLTreeNode<T>* search_iterator(AVLTreeNode<T>* pnode, T value)const;
	int height(AVLTreeNode<T>* pnode)const;
	int max(int a, int b);

	//左单旋
	AVLTreeNode<T>* leftRotation(AVLTreeNode<T>* pnode);
	//右单旋
	AVLTreeNode<T>* rightRotation(AVLTreeNode<T>* pnode);

	//先左旋后右旋
	AVLTreeNode<T>* leftRightRotation(AVLTreeNode<T>* pnode);
	//先右旋后左旋
	AVLTreeNode<T>* rightLeftRotation(AVLTreeNode<T>* pnode);

	//3 + 4重构
	AVLTreeNode<T>* connect34(AVLTreeNode<T>*, AVLTreeNode<T>*, AVLTreeNode<T>*, AVLTreeNode<T>*, AVLTreeNode<T>*, AVLTreeNode<T>*, AVLTreeNode<T>*);


};

template<typename T>
int AVLTree<T>::height(AVLTreeNode<T>* pnode) const
{
	if (pnode != nullptr) {
		return pnode->height;
	}

	return 0;
}

template<typename T>
int AVLTree<T>::max(int a, int b)
{

	return a > b? a: b;
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::leftRotation(AVLTreeNode<T>* pnode)
{
	AVLTreeNode<T>* t = pnode->rchild;
	pnode->rchild = t->lchild;
	t->lchild = pnode;

	pnode->height = max(height(pnode->rchild), height(pnode->lchild)) + 1;
	t->height = max(height(t->lchild), height(t->rchild)) + 1;


	return t;
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::rightRotation(AVLTreeNode<T>* pnode)
{
	AVLTreeNode<T>* t = pnode->lchild;
	pnode->lchild = t->rchild;
	t->rchild = pnode;

	pnode->height = max(height(pnode->rchild), height(pnode->lchild)) + 1;
	t->height = max(height(t->lchild), height(t->rchild)) + 1;

	return t;
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::leftRightRotation(AVLTreeNode<T>* pnode)
{
	/*AVLTreeNode<T>* t = pnode->lchild;
	AVLTreeNode<T>* s = t->rchild;

	t->rchild = s->lchild;
	pnode->lchild = s->rchild;
	s->lchild = t;
	s->rchild = pnode;

	t->height = max(height(t->lchild), height(t->rchild)) + 1;
	pnode->height = max(height(pnode->lchild), height(pnode->rchild)) + 1;
	s->height = max(height(s->lchild), height(s->rchild)) + 1;*/

	//先左旋
	pnode->lchild = leftRotation(pnode->lchild);

	//返回右旋
	return rightRotation(pnode);
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::rightLeftRotation(AVLTreeNode<T>* pnode)
{
	//先右旋
	pnode->rchild = rightRotation(pnode->lchild);
	//返回左旋
	return leftRotation(pnode);
}

//3 + 4重构
//运用 3 + 4重构的目的主要是避免写单旋和双旋这些复杂操作，用统一的接口来完成所有事情（合理传递参数即可）
//从另外一方面我们可以提取出事情的本质，更加看清事物的内在关系
template<typename T>
AVLTreeNode<T>* AVLTree<T>::connect34(AVLTreeNode<T>* a, AVLTreeNode<T>* b, AVLTreeNode<T>* c, AVLTreeNode<T>* T0, AVLTreeNode<T>* T1, AVLTreeNode<T>* T2, AVLTreeNode<T>* T3)
{
	a->lchild = T0;
	a->rchild = T1;
	c->lchild = T2;
	c->rchild = T3;
	b->lchild = a;
	b->rchild = c;

	a->height = max(height(a->lchild), height(a->rchild)) + 1;
	c->height = max(height(c->lchild), height(c->rchild)) + 1;
	b->height = max(height(b->lchild), height(b->rchild)) + 1;

	return b;
}

template<typename T>
int AVLTree<T>::height()
{
	
	return height(root);
}

template<typename T>
void AVLTree<T>::preOrder(AVLTreeNode<T>* pnode) const
{
	if (pnode) {
		cout << pnode->key << endl;
		preOrder(pnode->lchild);
		preOrder(pnode->rchild);
	}
}

template<typename T>
void AVLTree<T>::inOrder(AVLTreeNode<T>* pnode) const
{
	if (pnode) {
		inOrder(pnode->lchild);
		cout << pnode->key << "\t" << pnode->height << endl;
		inOrder(pnode->rchild);
	}
}

template<typename T>
void AVLTree<T>::postOrder(AVLTreeNode<T>* pnode) const
{
	if (pnode) {
		postOrder(pnode->lchild);
		postOrder(pnode->rchild);
		cout << pnode->key << endl;
	}
}

template<typename T>
void AVLTree<T>::print(AVLTreeNode<T>* pnode, T value, int direction) const
{
}

template<typename T>
void AVLTree<T>::destory(AVLTreeNode<T>*& pnode)
{
	if (pnode) {
		destory(pnode->lchild);
		destory(pnode->rchild);

		delete pnode;
		pnode = nullptr;
	}

	return;
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::minimum(AVLTreeNode<T>* pnode) const
{
	if (pnode != nullptr) {
		while (pnode->lchild != nullptr) {
			pnode = pnode->lchild;
		}

		return pnode;
	}

	return nullptr;
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::maximum(AVLTreeNode<T>* pnode) const
{
	if (pnode != nullptr) {
		while (pnode->rchild != nullptr) {
			pnode = pnode->rchild;
		}

		return pnode;
	}

	return nullptr;
}


//我觉得根本就不需要返回指针，因为参数就是引用
template<typename T>
AVLTreeNode<T>* AVLTree<T>::insert(AVLTreeNode<T>*& pnode, T value)
{
	if (pnode == nullptr)
		pnode = new AVLTreeNode<T>(value, nullptr, nullptr);
	else if (value < pnode->key) {
		//插入左边
		pnode->lchild = insert(pnode->lchild, value);

		//这种做法很好一步一步地回退直到根节点
		if (height(pnode->lchild) - height(pnode->rchild) == 2) {
			AVLTreeNode<T>* t = pnode->lchild;
			if (height(t->lchild) > height(t->rchild)) {

				//pnode = rightRotation(pnode);     单旋
				AVLTreeNode<T>* b = pnode->lchild;
				AVLTreeNode<T>* a = b->lchild;
				pnode = connect34(a, b, pnode, a->lchild, a->rchild, b->rchild, pnode->rchild);
			}
			else {

				//pnode = leftRightRotation(pnode);   双旋
				AVLTreeNode<T>* a = pnode->lchild;
				AVLTreeNode<T>* b = a->rchild;
				pnode = connect34(a, b, pnode, a->lchild, b->lchild, b->rchild, pnode->rchild);
			}
		}
	}
	else {
		pnode->rchild = insert(pnode->rchild, value);

		if (height(pnode->rchild) - height(pnode->lchild) == 2) {
			AVLTreeNode<T>* t = pnode->rchild;

			if (height(t->rchild) > height(t->lchild)) {
				//pnode = leftRotation(pnode);     单旋
				AVLTreeNode<T>* b = pnode->rchild;
				AVLTreeNode<T>* c = b->rchild;
				pnode = connect34(pnode, b, c, pnode->lchild, b->lchild, c->lchild, c->rchild);
			}
			else {
				//pnode = rightLeftRotation(pnode);       双旋
				AVLTreeNode<T>* c = pnode->rchild;
				AVLTreeNode<T>* b = c->lchild;
				pnode = connect34(pnode, b, c, pnode->lchild, b->lchild, b->rchild, c->rchild);
			}
		}

		
	}

	//在这里更新节点高度
	//可以这么理解，插入操作经过的所有节点都需要重新高度
	//这一句是不能删除的，删除了就不会是平衡二叉树了
	pnode->height = max(height(pnode->lchild), height(pnode->rchild)) + 1;

	return pnode;
}


//删除操作要比较复杂，因为删除操作会把失衡向上传播
//插入操作只需要平衡了最靠近的那个祖先就可以全树平衡了
//同时我们可以理解删除操作是插入操作的逆推过程
//删除右子树的节点导致AVL树失衡时，相当于在左子树插入节点导致AVL树失衡，即情况情况二或情况四。
//删除左子树的节点导致AVL树失衡时，相当于在右子树插入节点导致AVL树失衡，即情况情况一或情况三。
//而且AVL树也是一棵二叉查找树，删除的过程也是要维护二叉查找树的性质
template<typename T>
AVLTreeNode<T>* AVLTree<T>::remove(AVLTreeNode<T>*& pnode, T pdel)
{
	if (pnode != nullptr) {
		if (pdel == pnode->key) {
			//左右孩子不为空
			if (pnode->lchild && pnode->rchild) {
				if (height(pnode->lchild) > height(pnode->rchild)) {
					AVLTreeNode<T>* t = maximum(pnode->lchild);
					pnode->key = t->key;

					pnode->lchild = remove(pnode->lchild, t->key);
				}
				else
				{
					AVLTreeNode<T>* t = minimum(pnode->rchild);
					pnode->key = t->key;

					pnode->rchild = remove(pnode->rchild, t->key);
				}
			}
			else {
				AVLTreeNode<T>* t = pnode;
				if (pnode->lchild && !pnode->rchild)
					pnode = pnode->lchild;
				if (pnode->rchild && !pnode->lchild)
					pnode = pnode->rchild;
				if (!pnode->lchild && !pnode->rchild)
					pnode = nullptr;
				delete t;
				return pnode;
			}
		}
		else if (pdel < pnode->key) {
			pnode->lchild = remove(pnode->lchild, pdel);

			if (height(pnode->rchild) - height(pnode->lchild) == 2) {
				AVLTreeNode<T>* t = pnode->rchild;

				if (height(t->lchild) > height(t->rchild))
					pnode = leftRotation(pnode);
				else
					pnode = rightLeftRotation(pnode);
			}
		}
		else if (pdel > pnode->key) {
			pnode->rchild = remove(pnode->rchild, pdel);

			if (height(pnode->lchild) - height(pnode->rchild) == 2) {
				AVLTreeNode<T>* t = pnode->lchild;

				if (height(t->lchild) > height(t->rchild)) {
					pnode = rightRotation(pnode);
				}
				else
					pnode = leftRightRotation(pnode);
			}
		}
	}

	//这里的思路是和insert操作一致的
	pnode->height = max(height(pnode->lchild), height(pnode->rchild)) + 1;
	return pnode;
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::search_recurse(AVLTreeNode<T>* pnode, T value) const
{
	if (pnode != nullptr) {
		if (pnode->key == value)
			return pnode;
		else if (value < pnode->key)
			return search_recurse(pnode->lchild, value);
		else
			return search_recurse(pnode->rchild, value);
	}
	return nullptr;
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::search_iterator(AVLTreeNode<T>* pnode, T value) const
{
	if (pnode != nullptr) {
		while (pnode != nullptr) {
			if (pnode->key == value)
				return pnode;
			else if (value < pnode->key)
				pnode = pnode->lchild;
			else
				pnode = pnode->rchild;
		}
	}
	return nullptr;
}

template<typename T>
AVLTree<T>::AVLTree()
{
	root = nullptr;
}

template<typename T>
AVLTree<T>::~AVLTree()
{
	destory(root);
}

template<typename T>
void AVLTree<T>::preOrder()
{
	preOrder(root);
}

template<typename T>
void AVLTree<T>::inOrder()
{
	inOrder(root);
}

template<typename T>
void AVLTree<T>::postOrder()
{
	postOrder(root);
}

template<typename T>
void AVLTree<T>::print()
{
}

template<typename T>
void AVLTree<T>::destroy()
{
	destory(root);
}

template<typename T>
void AVLTree<T>::insert(T value)
{
	insert(root, value);
}

template<typename T>
void AVLTree<T>::remove(T value)
{
	remove(root, value);
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::search_recurse(T value)
{
	return search_recurse(root, value);
}

template<typename T>
AVLTreeNode<T>* AVLTree<T>::search_iterator(T value)
{
	return search_iterator(root, value);
}

template<typename T>
T AVLTree<T>::minimum()
{
	return minimum(root);
}

template<typename T>
T AVLTree<T>::maximum()
{
	return maximum(root);
}



int main()
{
	AVLTree<int> a;
	for (int i = 0; i < 10; i++)
		a.insert(i);
	cout << "树高：" << a.height() << endl;

	cout << "中序遍历:" << endl;
	a.inOrder();

	cout << "前序遍历:" << endl;
	a.preOrder();

	cout << "删除元素9" << endl;
	a.remove(9);

	cout << "中序遍历:" << endl;
	a.inOrder();

	AVLTreeNode<int>* b = a.search_iterator(8);

	if (b != nullptr)
		cout << b->key <<endl;
	else
		cout << "无此元素" << endl;

	getchar();

	return 0;
}
